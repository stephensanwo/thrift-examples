// Code generated by Thrift Compiler (0.22.0). DO NOT EDIT.

package weather

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"iter"
	"log/slog"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = bytes.Equal
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = iter.Pull[int]
var _ = slog.Log
var _ = time.Now
var _ = thrift.ZERO
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - Temperature
//  - Location
//  - Timestamp
//  - Unit
// 
type TemperatureReading struct {
	Temperature float64 `thrift:"temperature,1" db:"temperature" json:"temperature"`
	Location string `thrift:"location,2" db:"location" json:"location"`
	Timestamp int64 `thrift:"timestamp,3" db:"timestamp" json:"timestamp"`
	Unit string `thrift:"unit,4" db:"unit" json:"unit"`
}

func NewTemperatureReading() *TemperatureReading {
	return &TemperatureReading{
		Unit: "celsius",
	}
}



func (p *TemperatureReading) GetTemperature() float64 {
	return p.Temperature
}



func (p *TemperatureReading) GetLocation() string {
	return p.Location
}



func (p *TemperatureReading) GetTimestamp() int64 {
	return p.Timestamp
}



func (p *TemperatureReading) GetUnit() string {
	return p.Unit
}

func (p *TemperatureReading) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TemperatureReading) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Temperature = v
	}
	return nil
}

func (p *TemperatureReading) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Location = v
	}
	return nil
}

func (p *TemperatureReading) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *TemperatureReading) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Unit = v
	}
	return nil
}

func (p *TemperatureReading) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TemperatureReading"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TemperatureReading) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "temperature", thrift.DOUBLE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:temperature: ", p), err)
	}
	if err := oprot.WriteDouble(ctx, float64(p.Temperature)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.temperature (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:temperature: ", p), err)
	}
	return err
}

func (p *TemperatureReading) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "location", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:location: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Location)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.location (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:location: ", p), err)
	}
	return err
}

func (p *TemperatureReading) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err)
	}
	return err
}

func (p *TemperatureReading) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "unit", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:unit: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Unit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.unit (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:unit: ", p), err)
	}
	return err
}

func (p *TemperatureReading) Equals(other *TemperatureReading) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Temperature != other.Temperature { return false }
	if p.Location != other.Location { return false }
	if p.Timestamp != other.Timestamp { return false }
	if p.Unit != other.Unit { return false }
	return true
}

func (p *TemperatureReading) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TemperatureReading(%+v)", *p)
}

func (p *TemperatureReading) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*weather.TemperatureReading",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TemperatureReading)(nil)

func (p *TemperatureReading) Validate() error {
	return nil
}

// Attributes:
//  - Location
// 
type WeatherRequest struct {
	Location string `thrift:"location,1" db:"location" json:"location"`
}

func NewWeatherRequest() *WeatherRequest {
	return &WeatherRequest{}
}



func (p *WeatherRequest) GetLocation() string {
	return p.Location
}

func (p *WeatherRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WeatherRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Location = v
	}
	return nil
}

func (p *WeatherRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "WeatherRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WeatherRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "location", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:location: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Location)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.location (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:location: ", p), err)
	}
	return err
}

func (p *WeatherRequest) Equals(other *WeatherRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Location != other.Location { return false }
	return true
}

func (p *WeatherRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WeatherRequest(%+v)", *p)
}

func (p *WeatherRequest) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*weather.WeatherRequest",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*WeatherRequest)(nil)

func (p *WeatherRequest) Validate() error {
	return nil
}

// Attributes:
//  - Message
//  - Details
// 
type WeatherServiceError struct {
	Message string `thrift:"message,1" db:"message" json:"message"`
	Details string `thrift:"details,2" db:"details" json:"details"`
}

func NewWeatherServiceError() *WeatherServiceError {
	return &WeatherServiceError{}
}



func (p *WeatherServiceError) GetMessage() string {
	return p.Message
}



func (p *WeatherServiceError) GetDetails() string {
	return p.Details
}

func (p *WeatherServiceError) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WeatherServiceError) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *WeatherServiceError) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Details = v
	}
	return nil
}

func (p *WeatherServiceError) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "WeatherServiceError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WeatherServiceError) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *WeatherServiceError) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "details", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:details: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Details)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.details (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:details: ", p), err)
	}
	return err
}

func (p *WeatherServiceError) Equals(other *WeatherServiceError) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Message != other.Message { return false }
	if p.Details != other.Details { return false }
	return true
}

func (p *WeatherServiceError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WeatherServiceError(%+v)", *p)
}

func (p *WeatherServiceError) Error() string {
	return p.String()
}

func (WeatherServiceError) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*WeatherServiceError)(nil)

func (p *WeatherServiceError) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*weather.WeatherServiceError",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*WeatherServiceError)(nil)

func (p *WeatherServiceError) Validate() error {
	return nil
}

type WeatherMonitorService interface {
	// Parameters:
	//  - Request
	// 
	GetTemperature(ctx context.Context, request *WeatherRequest) (_r *TemperatureReading, _err error)
}

type WeatherMonitorServiceClient struct {
	c thrift.TClient
	meta thrift.ResponseMeta
}

func NewWeatherMonitorServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *WeatherMonitorServiceClient {
	return &WeatherMonitorServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewWeatherMonitorServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *WeatherMonitorServiceClient {
	return &WeatherMonitorServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewWeatherMonitorServiceClient(c thrift.TClient) *WeatherMonitorServiceClient {
	return &WeatherMonitorServiceClient{
		c: c,
	}
}

func (p *WeatherMonitorServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *WeatherMonitorServiceClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *WeatherMonitorServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//  - Request
// 
func (p *WeatherMonitorServiceClient) GetTemperature(ctx context.Context, request *WeatherRequest) (_r *TemperatureReading, _err error) {
	var _args0 WeatherMonitorServiceGetTemperatureArgs
	_args0.Request = request
	var _result2 WeatherMonitorServiceGetTemperatureResult
	var _meta1 thrift.ResponseMeta
	_meta1, _err = p.Client_().Call(ctx, "getTemperature", &_args0, &_result2)
	p.SetLastResponseMeta_(_meta1)
	if _err != nil {
		return
	}
	switch {
	case _result2.Error!= nil:
		return _r, _result2.Error
	}

	if _ret3 := _result2.GetSuccess(); _ret3 != nil {
		return _ret3, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getTemperature failed: unknown result")
}

type WeatherMonitorServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler WeatherMonitorService
}

func (p *WeatherMonitorServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *WeatherMonitorServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *WeatherMonitorServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewWeatherMonitorServiceProcessor(handler WeatherMonitorService) *WeatherMonitorServiceProcessor {

	self4 := &WeatherMonitorServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
	self4.processorMap["getTemperature"] = &weatherMonitorServiceProcessorGetTemperature{handler:handler}
	return self4
}

func (p *WeatherMonitorServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil { return false, thrift.WrapTException(err2) }
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x5.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x5
}

type weatherMonitorServiceProcessorGetTemperature struct {
	handler WeatherMonitorService
}

func (p *weatherMonitorServiceProcessorGetTemperature) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err6 thrift.TException
	args := WeatherMonitorServiceGetTemperatureArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getTemperature", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := WeatherMonitorServiceGetTemperatureResult{}
	if retval, err2 := p.handler.GetTemperature(ctx, args.Request); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *WeatherServiceError:
			result.Error = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc7 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTemperature: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "getTemperature", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err6 = thrift.WrapTException(err2)
			}
			if err2 := _exc7.Write(ctx, oprot); _write_err6 == nil && err2 != nil {
				_write_err6 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err6 == nil && err2 != nil {
				_write_err6 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err6 == nil && err2 != nil {
				_write_err6 = thrift.WrapTException(err2)
			}
			if _write_err6 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err6,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getTemperature", thrift.REPLY, seqId); err2 != nil {
		_write_err6 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err6 == nil && err2 != nil {
		_write_err6 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err6 == nil && err2 != nil {
		_write_err6 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err6 == nil && err2 != nil {
		_write_err6 = thrift.WrapTException(err2)
	}
	if _write_err6 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err6,
			EndpointError: err,
		}
	}
	return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
// 
type WeatherMonitorServiceGetTemperatureArgs struct {
	Request *WeatherRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewWeatherMonitorServiceGetTemperatureArgs() *WeatherMonitorServiceGetTemperatureArgs {
	return &WeatherMonitorServiceGetTemperatureArgs{}
}

var WeatherMonitorServiceGetTemperatureArgs_Request_DEFAULT *WeatherRequest

func (p *WeatherMonitorServiceGetTemperatureArgs) GetRequest() *WeatherRequest {
	if !p.IsSetRequest() {
		return WeatherMonitorServiceGetTemperatureArgs_Request_DEFAULT
	}
	return p.Request
}

func (p *WeatherMonitorServiceGetTemperatureArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *WeatherMonitorServiceGetTemperatureArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WeatherMonitorServiceGetTemperatureArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &WeatherRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *WeatherMonitorServiceGetTemperatureArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTemperature_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WeatherMonitorServiceGetTemperatureArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *WeatherMonitorServiceGetTemperatureArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WeatherMonitorServiceGetTemperatureArgs(%+v)", *p)
}

func (p *WeatherMonitorServiceGetTemperatureArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*weather.WeatherMonitorServiceGetTemperatureArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*WeatherMonitorServiceGetTemperatureArgs)(nil)

// Attributes:
//  - Success
//  - Error
// 
type WeatherMonitorServiceGetTemperatureResult struct {
	Success *TemperatureReading `thrift:"success,0" db:"success" json:"success,omitempty"`
	Error *WeatherServiceError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewWeatherMonitorServiceGetTemperatureResult() *WeatherMonitorServiceGetTemperatureResult {
	return &WeatherMonitorServiceGetTemperatureResult{}
}

var WeatherMonitorServiceGetTemperatureResult_Success_DEFAULT *TemperatureReading

func (p *WeatherMonitorServiceGetTemperatureResult) GetSuccess() *TemperatureReading {
	if !p.IsSetSuccess() {
		return WeatherMonitorServiceGetTemperatureResult_Success_DEFAULT
	}
	return p.Success
}

var WeatherMonitorServiceGetTemperatureResult_Error_DEFAULT *WeatherServiceError

func (p *WeatherMonitorServiceGetTemperatureResult) GetError() *WeatherServiceError {
	if !p.IsSetError() {
		return WeatherMonitorServiceGetTemperatureResult_Error_DEFAULT
	}
	return p.Error
}

func (p *WeatherMonitorServiceGetTemperatureResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WeatherMonitorServiceGetTemperatureResult) IsSetError() bool {
	return p.Error != nil
}

func (p *WeatherMonitorServiceGetTemperatureResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WeatherMonitorServiceGetTemperatureResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &TemperatureReading{
		Unit: "celsius",
	}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *WeatherMonitorServiceGetTemperatureResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Error = &WeatherServiceError{}
	if err := p.Error.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *WeatherMonitorServiceGetTemperatureResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getTemperature_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WeatherMonitorServiceGetTemperatureResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *WeatherMonitorServiceGetTemperatureResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *WeatherMonitorServiceGetTemperatureResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WeatherMonitorServiceGetTemperatureResult(%+v)", *p)
}

func (p *WeatherMonitorServiceGetTemperatureResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*weather.WeatherMonitorServiceGetTemperatureResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*WeatherMonitorServiceGetTemperatureResult)(nil)


