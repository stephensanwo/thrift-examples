// Code generated by Thrift Compiler (0.22.0). DO NOT EDIT.

package llm

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"iter"
	"log/slog"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = bytes.Equal
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = iter.Pull[int]
var _ = slog.Log
var _ = time.Now
var _ = thrift.ZERO
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - Prompt
//  - MaxLength
//  - Temperature
//  - TopP
//  - TopK
// 
type TextGenerationRequest struct {
	Prompt string `thrift:"prompt,1" db:"prompt" json:"prompt"`
	MaxLength int32 `thrift:"max_length,2" db:"max_length" json:"max_length"`
	Temperature float64 `thrift:"temperature,3" db:"temperature" json:"temperature"`
	TopP float64 `thrift:"top_p,4" db:"top_p" json:"top_p"`
	TopK int32 `thrift:"top_k,5" db:"top_k" json:"top_k"`
}

func NewTextGenerationRequest() *TextGenerationRequest {
	return &TextGenerationRequest{
		MaxLength: 512,
		Temperature: 0.7,
		TopP: 0.95,
		TopK: 50,
	}
}



func (p *TextGenerationRequest) GetPrompt() string {
	return p.Prompt
}



func (p *TextGenerationRequest) GetMaxLength() int32 {
	return p.MaxLength
}



func (p *TextGenerationRequest) GetTemperature() float64 {
	return p.Temperature
}



func (p *TextGenerationRequest) GetTopP() float64 {
	return p.TopP
}



func (p *TextGenerationRequest) GetTopK() int32 {
	return p.TopK
}

func (p *TextGenerationRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TextGenerationRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Prompt = v
	}
	return nil
}

func (p *TextGenerationRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MaxLength = v
	}
	return nil
}

func (p *TextGenerationRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Temperature = v
	}
	return nil
}

func (p *TextGenerationRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TopP = v
	}
	return nil
}

func (p *TextGenerationRequest) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.TopK = v
	}
	return nil
}

func (p *TextGenerationRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TextGenerationRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TextGenerationRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "prompt", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:prompt: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Prompt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.prompt (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:prompt: ", p), err)
	}
	return err
}

func (p *TextGenerationRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "max_length", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:max_length: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.MaxLength)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_length (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:max_length: ", p), err)
	}
	return err
}

func (p *TextGenerationRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "temperature", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:temperature: ", p), err)
	}
	if err := oprot.WriteDouble(ctx, float64(p.Temperature)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.temperature (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:temperature: ", p), err)
	}
	return err
}

func (p *TextGenerationRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "top_p", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:top_p: ", p), err)
	}
	if err := oprot.WriteDouble(ctx, float64(p.TopP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.top_p (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:top_p: ", p), err)
	}
	return err
}

func (p *TextGenerationRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "top_k", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:top_k: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.TopK)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.top_k (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:top_k: ", p), err)
	}
	return err
}

func (p *TextGenerationRequest) Equals(other *TextGenerationRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Prompt != other.Prompt { return false }
	if p.MaxLength != other.MaxLength { return false }
	if p.Temperature != other.Temperature { return false }
	if p.TopP != other.TopP { return false }
	if p.TopK != other.TopK { return false }
	return true
}

func (p *TextGenerationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TextGenerationRequest(%+v)", *p)
}

func (p *TextGenerationRequest) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*llm.TextGenerationRequest",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TextGenerationRequest)(nil)

func (p *TextGenerationRequest) Validate() error {
	return nil
}

// Attributes:
//  - GeneratedText
//  - GenerationTime
//  - InputTokens
//  - GeneratedTokens
// 
type TextGenerationResponse struct {
	GeneratedText string `thrift:"generated_text,1" db:"generated_text" json:"generated_text"`
	GenerationTime float64 `thrift:"generation_time,2" db:"generation_time" json:"generation_time"`
	InputTokens int32 `thrift:"input_tokens,3" db:"input_tokens" json:"input_tokens"`
	GeneratedTokens int32 `thrift:"generated_tokens,4" db:"generated_tokens" json:"generated_tokens"`
}

func NewTextGenerationResponse() *TextGenerationResponse {
	return &TextGenerationResponse{}
}



func (p *TextGenerationResponse) GetGeneratedText() string {
	return p.GeneratedText
}



func (p *TextGenerationResponse) GetGenerationTime() float64 {
	return p.GenerationTime
}



func (p *TextGenerationResponse) GetInputTokens() int32 {
	return p.InputTokens
}



func (p *TextGenerationResponse) GetGeneratedTokens() int32 {
	return p.GeneratedTokens
}

func (p *TextGenerationResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TextGenerationResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GeneratedText = v
	}
	return nil
}

func (p *TextGenerationResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GenerationTime = v
	}
	return nil
}

func (p *TextGenerationResponse) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.InputTokens = v
	}
	return nil
}

func (p *TextGenerationResponse) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.GeneratedTokens = v
	}
	return nil
}

func (p *TextGenerationResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TextGenerationResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TextGenerationResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "generated_text", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:generated_text: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.GeneratedText)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.generated_text (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:generated_text: ", p), err)
	}
	return err
}

func (p *TextGenerationResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "generation_time", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:generation_time: ", p), err)
	}
	if err := oprot.WriteDouble(ctx, float64(p.GenerationTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.generation_time (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:generation_time: ", p), err)
	}
	return err
}

func (p *TextGenerationResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "input_tokens", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:input_tokens: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.InputTokens)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.input_tokens (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:input_tokens: ", p), err)
	}
	return err
}

func (p *TextGenerationResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "generated_tokens", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:generated_tokens: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.GeneratedTokens)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.generated_tokens (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:generated_tokens: ", p), err)
	}
	return err
}

func (p *TextGenerationResponse) Equals(other *TextGenerationResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.GeneratedText != other.GeneratedText { return false }
	if p.GenerationTime != other.GenerationTime { return false }
	if p.InputTokens != other.InputTokens { return false }
	if p.GeneratedTokens != other.GeneratedTokens { return false }
	return true
}

func (p *TextGenerationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TextGenerationResponse(%+v)", *p)
}

func (p *TextGenerationResponse) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*llm.TextGenerationResponse",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TextGenerationResponse)(nil)

func (p *TextGenerationResponse) Validate() error {
	return nil
}

// Attributes:
//  - Text
//  - Labels
// 
type TextClassificationRequest struct {
	Text string `thrift:"text,1" db:"text" json:"text"`
	Labels []string `thrift:"labels,2" db:"labels" json:"labels"`
}

func NewTextClassificationRequest() *TextClassificationRequest {
	return &TextClassificationRequest{}
}



func (p *TextClassificationRequest) GetText() string {
	return p.Text
}



func (p *TextClassificationRequest) GetLabels() []string {
	return p.Labels
}

func (p *TextClassificationRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TextClassificationRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Text = v
	}
	return nil
}

func (p *TextClassificationRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Labels = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Labels = append(p.Labels, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TextClassificationRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TextClassificationRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TextClassificationRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:text: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.text (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:text: ", p), err)
	}
	return err
}

func (p *TextClassificationRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "labels", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:labels: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Labels)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Labels {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:labels: ", p), err)
	}
	return err
}

func (p *TextClassificationRequest) Equals(other *TextClassificationRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Text != other.Text { return false }
	if len(p.Labels) != len(other.Labels) { return false }
	for i, _tgt := range p.Labels {
		_src1 := other.Labels[i]
		if _tgt != _src1 { return false }
	}
	return true
}

func (p *TextClassificationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TextClassificationRequest(%+v)", *p)
}

func (p *TextClassificationRequest) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*llm.TextClassificationRequest",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TextClassificationRequest)(nil)

func (p *TextClassificationRequest) Validate() error {
	return nil
}

// Attributes:
//  - Label
//  - Confidence
//  - ClassificationTime
// 
type TextClassificationResponse struct {
	Label string `thrift:"label,1" db:"label" json:"label"`
	Confidence float64 `thrift:"confidence,2" db:"confidence" json:"confidence"`
	ClassificationTime float64 `thrift:"classification_time,3" db:"classification_time" json:"classification_time"`
}

func NewTextClassificationResponse() *TextClassificationResponse {
	return &TextClassificationResponse{}
}



func (p *TextClassificationResponse) GetLabel() string {
	return p.Label
}



func (p *TextClassificationResponse) GetConfidence() float64 {
	return p.Confidence
}



func (p *TextClassificationResponse) GetClassificationTime() float64 {
	return p.ClassificationTime
}

func (p *TextClassificationResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TextClassificationResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Label = v
	}
	return nil
}

func (p *TextClassificationResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Confidence = v
	}
	return nil
}

func (p *TextClassificationResponse) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ClassificationTime = v
	}
	return nil
}

func (p *TextClassificationResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TextClassificationResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TextClassificationResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "label", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:label: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Label)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.label (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:label: ", p), err)
	}
	return err
}

func (p *TextClassificationResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "confidence", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:confidence: ", p), err)
	}
	if err := oprot.WriteDouble(ctx, float64(p.Confidence)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.confidence (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:confidence: ", p), err)
	}
	return err
}

func (p *TextClassificationResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "classification_time", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:classification_time: ", p), err)
	}
	if err := oprot.WriteDouble(ctx, float64(p.ClassificationTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.classification_time (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:classification_time: ", p), err)
	}
	return err
}

func (p *TextClassificationResponse) Equals(other *TextClassificationResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Label != other.Label { return false }
	if p.Confidence != other.Confidence { return false }
	if p.ClassificationTime != other.ClassificationTime { return false }
	return true
}

func (p *TextClassificationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TextClassificationResponse(%+v)", *p)
}

func (p *TextClassificationResponse) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*llm.TextClassificationResponse",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TextClassificationResponse)(nil)

func (p *TextClassificationResponse) Validate() error {
	return nil
}

// Attributes:
//  - Message
//  - Details
// 
type ModelError struct {
	Message string `thrift:"message,1" db:"message" json:"message"`
	Details string `thrift:"details,2" db:"details" json:"details"`
}

func NewModelError() *ModelError {
	return &ModelError{}
}



func (p *ModelError) GetMessage() string {
	return p.Message
}



func (p *ModelError) GetDetails() string {
	return p.Details
}

func (p *ModelError) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ModelError) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *ModelError) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Details = v
	}
	return nil
}

func (p *ModelError) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ModelError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ModelError) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *ModelError) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "details", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:details: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Details)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.details (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:details: ", p), err)
	}
	return err
}

func (p *ModelError) Equals(other *ModelError) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Message != other.Message { return false }
	if p.Details != other.Details { return false }
	return true
}

func (p *ModelError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelError(%+v)", *p)
}

func (p *ModelError) Error() string {
	return p.String()
}

func (ModelError) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*ModelError)(nil)

func (p *ModelError) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*llm.ModelError",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*ModelError)(nil)

func (p *ModelError) Validate() error {
	return nil
}

type LanguageModelService interface {
	// Parameters:
	//  - Request
	// 
	GenerateText(ctx context.Context, request *TextGenerationRequest) (_r *TextGenerationResponse, _err error)
	// Parameters:
	//  - Request
	// 
	ClassifyText(ctx context.Context, request *TextClassificationRequest) (_r *TextClassificationResponse, _err error)
}

type LanguageModelServiceClient struct {
	c thrift.TClient
	meta thrift.ResponseMeta
}

func NewLanguageModelServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LanguageModelServiceClient {
	return &LanguageModelServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewLanguageModelServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LanguageModelServiceClient {
	return &LanguageModelServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewLanguageModelServiceClient(c thrift.TClient) *LanguageModelServiceClient {
	return &LanguageModelServiceClient{
		c: c,
	}
}

func (p *LanguageModelServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *LanguageModelServiceClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *LanguageModelServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//  - Request
// 
func (p *LanguageModelServiceClient) GenerateText(ctx context.Context, request *TextGenerationRequest) (_r *TextGenerationResponse, _err error) {
	var _args2 LanguageModelServiceGenerateTextArgs
	_args2.Request = request
	var _result4 LanguageModelServiceGenerateTextResult
	var _meta3 thrift.ResponseMeta
	_meta3, _err = p.Client_().Call(ctx, "generateText", &_args2, &_result4)
	p.SetLastResponseMeta_(_meta3)
	if _err != nil {
		return
	}
	switch {
	case _result4.Error!= nil:
		return _r, _result4.Error
	}

	if _ret5 := _result4.GetSuccess(); _ret5 != nil {
		return _ret5, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "generateText failed: unknown result")
}

// Parameters:
//  - Request
// 
func (p *LanguageModelServiceClient) ClassifyText(ctx context.Context, request *TextClassificationRequest) (_r *TextClassificationResponse, _err error) {
	var _args6 LanguageModelServiceClassifyTextArgs
	_args6.Request = request
	var _result8 LanguageModelServiceClassifyTextResult
	var _meta7 thrift.ResponseMeta
	_meta7, _err = p.Client_().Call(ctx, "classifyText", &_args6, &_result8)
	p.SetLastResponseMeta_(_meta7)
	if _err != nil {
		return
	}
	switch {
	case _result8.Error!= nil:
		return _r, _result8.Error
	}

	if _ret9 := _result8.GetSuccess(); _ret9 != nil {
		return _ret9, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "classifyText failed: unknown result")
}

type LanguageModelServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler LanguageModelService
}

func (p *LanguageModelServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *LanguageModelServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *LanguageModelServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewLanguageModelServiceProcessor(handler LanguageModelService) *LanguageModelServiceProcessor {

	self10 := &LanguageModelServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
	self10.processorMap["generateText"] = &languageModelServiceProcessorGenerateText{handler:handler}
	self10.processorMap["classifyText"] = &languageModelServiceProcessorClassifyText{handler:handler}
	return self10
}

func (p *LanguageModelServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil { return false, thrift.WrapTException(err2) }
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x11.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x11
}

type languageModelServiceProcessorGenerateText struct {
	handler LanguageModelService
}

func (p *languageModelServiceProcessorGenerateText) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err12 thrift.TException
	args := LanguageModelServiceGenerateTextArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "generateText", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := LanguageModelServiceGenerateTextResult{}
	if retval, err2 := p.handler.GenerateText(ctx, args.Request); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *ModelError:
			result.Error = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc13 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing generateText: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "generateText", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err12 = thrift.WrapTException(err2)
			}
			if err2 := _exc13.Write(ctx, oprot); _write_err12 == nil && err2 != nil {
				_write_err12 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err12 == nil && err2 != nil {
				_write_err12 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err12 == nil && err2 != nil {
				_write_err12 = thrift.WrapTException(err2)
			}
			if _write_err12 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err12,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "generateText", thrift.REPLY, seqId); err2 != nil {
		_write_err12 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err12 == nil && err2 != nil {
		_write_err12 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err12 == nil && err2 != nil {
		_write_err12 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err12 == nil && err2 != nil {
		_write_err12 = thrift.WrapTException(err2)
	}
	if _write_err12 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err12,
			EndpointError: err,
		}
	}
	return true, err
}

type languageModelServiceProcessorClassifyText struct {
	handler LanguageModelService
}

func (p *languageModelServiceProcessorClassifyText) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err14 thrift.TException
	args := LanguageModelServiceClassifyTextArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "classifyText", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := LanguageModelServiceClassifyTextResult{}
	if retval, err2 := p.handler.ClassifyText(ctx, args.Request); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		switch v := err2.(type) {
		case *ModelError:
			result.Error = v
		default:
			if errors.Is(err2, thrift.ErrAbandonRequest) {
				return false, &thrift.ProcessorError{
					WriteError:    thrift.WrapTException(err2),
					EndpointError: err,
				}
			}
			if errors.Is(err2, context.Canceled) {
				if err3 := context.Cause(ctx); errors.Is(err3, thrift.ErrAbandonRequest) {
					return false, &thrift.ProcessorError{
						WriteError:    thrift.WrapTException(err3),
						EndpointError: err,
					}
				}
			}
			_exc15 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing classifyText: " + err2.Error())
			if err2 := oprot.WriteMessageBegin(ctx, "classifyText", thrift.EXCEPTION, seqId); err2 != nil {
				_write_err14 = thrift.WrapTException(err2)
			}
			if err2 := _exc15.Write(ctx, oprot); _write_err14 == nil && err2 != nil {
				_write_err14 = thrift.WrapTException(err2)
			}
			if err2 := oprot.WriteMessageEnd(ctx); _write_err14 == nil && err2 != nil {
				_write_err14 = thrift.WrapTException(err2)
			}
			if err2 := oprot.Flush(ctx); _write_err14 == nil && err2 != nil {
				_write_err14 = thrift.WrapTException(err2)
			}
			if _write_err14 != nil {
				return false, &thrift.ProcessorError{
					WriteError:    _write_err14,
					EndpointError: err,
				}
			}
			return true, err
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "classifyText", thrift.REPLY, seqId); err2 != nil {
		_write_err14 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err14 == nil && err2 != nil {
		_write_err14 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err14 == nil && err2 != nil {
		_write_err14 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err14 == nil && err2 != nil {
		_write_err14 = thrift.WrapTException(err2)
	}
	if _write_err14 != nil {
		return false, &thrift.ProcessorError{
			WriteError:    _write_err14,
			EndpointError: err,
		}
	}
	return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
// 
type LanguageModelServiceGenerateTextArgs struct {
	Request *TextGenerationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewLanguageModelServiceGenerateTextArgs() *LanguageModelServiceGenerateTextArgs {
	return &LanguageModelServiceGenerateTextArgs{}
}

var LanguageModelServiceGenerateTextArgs_Request_DEFAULT *TextGenerationRequest

func (p *LanguageModelServiceGenerateTextArgs) GetRequest() *TextGenerationRequest {
	if !p.IsSetRequest() {
		return LanguageModelServiceGenerateTextArgs_Request_DEFAULT
	}
	return p.Request
}

func (p *LanguageModelServiceGenerateTextArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *LanguageModelServiceGenerateTextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LanguageModelServiceGenerateTextArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &TextGenerationRequest{
		MaxLength: 512,
		Temperature: 0.7,
		TopP: 0.95,
		TopK: 50,
	}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *LanguageModelServiceGenerateTextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "generateText_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LanguageModelServiceGenerateTextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *LanguageModelServiceGenerateTextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LanguageModelServiceGenerateTextArgs(%+v)", *p)
}

func (p *LanguageModelServiceGenerateTextArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*llm.LanguageModelServiceGenerateTextArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*LanguageModelServiceGenerateTextArgs)(nil)

// Attributes:
//  - Success
//  - Error
// 
type LanguageModelServiceGenerateTextResult struct {
	Success *TextGenerationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	Error *ModelError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewLanguageModelServiceGenerateTextResult() *LanguageModelServiceGenerateTextResult {
	return &LanguageModelServiceGenerateTextResult{}
}

var LanguageModelServiceGenerateTextResult_Success_DEFAULT *TextGenerationResponse

func (p *LanguageModelServiceGenerateTextResult) GetSuccess() *TextGenerationResponse {
	if !p.IsSetSuccess() {
		return LanguageModelServiceGenerateTextResult_Success_DEFAULT
	}
	return p.Success
}

var LanguageModelServiceGenerateTextResult_Error_DEFAULT *ModelError

func (p *LanguageModelServiceGenerateTextResult) GetError() *ModelError {
	if !p.IsSetError() {
		return LanguageModelServiceGenerateTextResult_Error_DEFAULT
	}
	return p.Error
}

func (p *LanguageModelServiceGenerateTextResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LanguageModelServiceGenerateTextResult) IsSetError() bool {
	return p.Error != nil
}

func (p *LanguageModelServiceGenerateTextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LanguageModelServiceGenerateTextResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &TextGenerationResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LanguageModelServiceGenerateTextResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Error = &ModelError{}
	if err := p.Error.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *LanguageModelServiceGenerateTextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "generateText_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LanguageModelServiceGenerateTextResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LanguageModelServiceGenerateTextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *LanguageModelServiceGenerateTextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LanguageModelServiceGenerateTextResult(%+v)", *p)
}

func (p *LanguageModelServiceGenerateTextResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*llm.LanguageModelServiceGenerateTextResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*LanguageModelServiceGenerateTextResult)(nil)

// Attributes:
//  - Request
// 
type LanguageModelServiceClassifyTextArgs struct {
	Request *TextClassificationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewLanguageModelServiceClassifyTextArgs() *LanguageModelServiceClassifyTextArgs {
	return &LanguageModelServiceClassifyTextArgs{}
}

var LanguageModelServiceClassifyTextArgs_Request_DEFAULT *TextClassificationRequest

func (p *LanguageModelServiceClassifyTextArgs) GetRequest() *TextClassificationRequest {
	if !p.IsSetRequest() {
		return LanguageModelServiceClassifyTextArgs_Request_DEFAULT
	}
	return p.Request
}

func (p *LanguageModelServiceClassifyTextArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *LanguageModelServiceClassifyTextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LanguageModelServiceClassifyTextArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &TextClassificationRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *LanguageModelServiceClassifyTextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "classifyText_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LanguageModelServiceClassifyTextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *LanguageModelServiceClassifyTextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LanguageModelServiceClassifyTextArgs(%+v)", *p)
}

func (p *LanguageModelServiceClassifyTextArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*llm.LanguageModelServiceClassifyTextArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*LanguageModelServiceClassifyTextArgs)(nil)

// Attributes:
//  - Success
//  - Error
// 
type LanguageModelServiceClassifyTextResult struct {
	Success *TextClassificationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	Error *ModelError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewLanguageModelServiceClassifyTextResult() *LanguageModelServiceClassifyTextResult {
	return &LanguageModelServiceClassifyTextResult{}
}

var LanguageModelServiceClassifyTextResult_Success_DEFAULT *TextClassificationResponse

func (p *LanguageModelServiceClassifyTextResult) GetSuccess() *TextClassificationResponse {
	if !p.IsSetSuccess() {
		return LanguageModelServiceClassifyTextResult_Success_DEFAULT
	}
	return p.Success
}

var LanguageModelServiceClassifyTextResult_Error_DEFAULT *ModelError

func (p *LanguageModelServiceClassifyTextResult) GetError() *ModelError {
	if !p.IsSetError() {
		return LanguageModelServiceClassifyTextResult_Error_DEFAULT
	}
	return p.Error
}

func (p *LanguageModelServiceClassifyTextResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LanguageModelServiceClassifyTextResult) IsSetError() bool {
	return p.Error != nil
}

func (p *LanguageModelServiceClassifyTextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LanguageModelServiceClassifyTextResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &TextClassificationResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *LanguageModelServiceClassifyTextResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Error = &ModelError{}
	if err := p.Error.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *LanguageModelServiceClassifyTextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "classifyText_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LanguageModelServiceClassifyTextResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LanguageModelServiceClassifyTextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
		}
		if err := p.Error.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
		}
	}
	return err
}

func (p *LanguageModelServiceClassifyTextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LanguageModelServiceClassifyTextResult(%+v)", *p)
}

func (p *LanguageModelServiceClassifyTextResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*llm.LanguageModelServiceClassifyTextResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*LanguageModelServiceClassifyTextResult)(nil)


